// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
{EndLicense}

[Fact]
public void Vector4CopyToTest()
{
    Vector4 v1 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});

    var a = new {ScalarType}[5];
    var b = new {ScalarType}[4];

    Assert.Throws<ArgumentOutOfRangeException>(() => v1.CopyTo(a, -1));
    Assert.Throws<ArgumentOutOfRangeException>(() => v1.CopyTo(a, a.Length));

    v1.CopyTo(a, 1);
    v1.CopyTo(b);
    Assert.Equal(0.0{ScalarSuffix}, a[0]);
    Assert.Equal(2.5{ScalarSuffix}, a[1]);
    Assert.Equal(2.0{ScalarSuffix}, a[2]);
    Assert.Equal(3.0{ScalarSuffix}, a[3]);
    Assert.Equal(3.3{ScalarSuffix}, a[4]);
    Assert.Equal(2.5{ScalarSuffix}, b[0]);
    Assert.Equal(2.0{ScalarSuffix}, b[1]);
    Assert.Equal(3.0{ScalarSuffix}, b[2]);
    Assert.Equal(3.3{ScalarSuffix}, b[3]);
}

[Fact]
public void Vector4GetHashCodeTest()
{
    Vector4 v1 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v2 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v3 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v5 = new Vector4(3.3{ScalarSuffix}, 3.0{ScalarSuffix}, 2.0{ScalarSuffix}, 2.5{ScalarSuffix});
    Assert.Equal(v1.GetHashCode(), v1.GetHashCode());
    Assert.Equal(v1.GetHashCode(), v2.GetHashCode());
    Assert.NotEqual(v1.GetHashCode(), v5.GetHashCode());
    Assert.Equal(v1.GetHashCode(), v3.GetHashCode());
    Vector4 v4 = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 v6 = new Vector4(1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 v7 = new Vector4(0.0{ScalarSuffix}, 1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 v8 = new Vector4(1.0{ScalarSuffix}, 1.0{ScalarSuffix}, 1.0{ScalarSuffix}, 1.0{ScalarSuffix});
    Vector4 v9 = new Vector4(1.0{ScalarSuffix}, 1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Assert.NotEqual(v4.GetHashCode(), v6.GetHashCode());
    Assert.NotEqual(v4.GetHashCode(), v7.GetHashCode());
    Assert.NotEqual(v4.GetHashCode(), v8.GetHashCode());
    Assert.NotEqual(v7.GetHashCode(), v6.GetHashCode());
    Assert.NotEqual(v8.GetHashCode(), v6.GetHashCode());
    Assert.NotEqual(v8.GetHashCode(), v7.GetHashCode());
    Assert.NotEqual(v9.GetHashCode(), v7.GetHashCode());
}

[Fact]
public void Vector4ToStringTest()
{
    string separator = CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator;
    CultureInfo enUsCultureInfo = new CultureInfo("en-US");

    Vector4 v1 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});

    string v1str = v1.ToString();
    string expectedv1 = string.Format(CultureInfo.CurrentCulture
        , "<{1:G}{0} {2:G}{0} {3:G}{0} {4:G}>"
        , separator, 2.5, 2, 3, 3.3);
    Assert.Equal(expectedv1, v1str);

    string v1strformatted = v1.ToString("c", CultureInfo.CurrentCulture);
    string expectedv1{ScalarSuffix}ormatted = string.Format(CultureInfo.CurrentCulture
        , "<{1:c}{0} {2:c}{0} {3:c}{0} {4:c}>"
        , separator, 2.5, 2, 3, 3.3);
    Assert.Equal(expectedv1{ScalarSuffix}ormatted, v1strformatted);

    string v2strformatted = v1.ToString("c", enUsCultureInfo);
    string expectedv2{ScalarSuffix}ormatted = string.Format(enUsCultureInfo
        , "<{1:c}{0} {2:c}{0} {3:c}{0} {4:c}>"
        , enUsCultureInfo.NumberFormat.NumberGroupSeparator, 2.5, 2, 3, 3.3);
    Assert.Equal(expectedv2{ScalarSuffix}ormatted, v2strformatted);

    string v3strformatted = v1.ToString("c");
    string expectedv3{ScalarSuffix}ormatted = string.Format(CultureInfo.CurrentCulture
        , "<{1:c}{0} {2:c}{0} {3:c}{0} {4:c}>"
        , separator, 2.5, 2, 3, 3.3);
    Assert.Equal(expectedv3{ScalarSuffix}ormatted, v3strformatted);
}

// A test for DistanceSquared (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4DistanceSquaredTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    {ScalarType} expected = 64.0{ScalarSuffix};
    {ScalarType} actual;

    actual = Vector4.DistanceSquared(a, b);
    Assert.True(MathHelper.EqualScalar(expected, actual), "Vector4{ScalarSuffix}.DistanceSquared did not return the expected value.");
}

// A test for Distance (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4DistanceTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    {ScalarType} expected = 8.0{ScalarSuffix};
    {ScalarType} actual;

    actual = Vector4.Distance(a, b);
    Assert.True(MathHelper.EqualScalar(expected, actual), "Vector4{ScalarSuffix}.Distance did not return the expected value.");
}

// A test for Distance (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
// Distance from the same point
[Fact]
public void Vector4DistanceTest1()
{
    Vector4 a = new Vector4(new Vector2(1.051{ScalarSuffix}, 2.05{ScalarSuffix}), 3.478{ScalarSuffix}, 1.0{ScalarSuffix});
    Vector4 b = new Vector4(new Vector3(1.051{ScalarSuffix}, 2.05{ScalarSuffix}, 3.478{ScalarSuffix}), 0.0{ScalarSuffix});
    b.W = 1.0{ScalarSuffix};

    {ScalarType} actual = Vector4.Distance(a, b);
    Assert.Equal(0.0{ScalarSuffix}, actual);
}

// A test for Dot (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4DotTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    {ScalarType} expected = 70.0{ScalarSuffix};
    {ScalarType} actual;

    actual = Vector4.Dot(a, b);
    Assert.True(MathHelper.EqualScalar(expected, actual), "Vector4{ScalarSuffix}.Dot did not return the expected value.");
}

// A test for Dot (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
// Dot test for perpendicular vector
[Fact]
public void Vector4DotTest1()
{
    Vector3 a = new Vector3(1.55{ScalarSuffix}, 1.55{ScalarSuffix}, 1);
    Vector3 b = new Vector3(2.5{ScalarSuffix}, 3, 1.5{ScalarSuffix});
    Vector3 c = Vector3.Cross(a, b);

    Vector4 d = new Vector4(a, 0);
    Vector4 e = new Vector4(c, 0);

    {ScalarType} actual = Vector4.Dot(d, e);
    Assert.True(MathHelper.EqualScalar(0.0{ScalarSuffix}, actual), "Vector4{ScalarSuffix}.Dot did not return the expected value.");
}

// A test for Length ()
[Fact]
public void Vector4LengthTest()
{
    Vector3 a = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    {ScalarType} w = 4.0{ScalarSuffix};

    Vector4 target = new Vector4(a, w);

    {ScalarType} expected = ({ScalarType})System.Math.Sqrt(30.0{ScalarSuffix});
    {ScalarType} actual;

    actual = target.Length();

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Length did not return the expected value.");
}

// A test for Length ()
// Length test where length is zero
[Fact]
public void Vector4LengthTest1()
{
    Vector4 target = new Vector4();

    {ScalarType} expected = 0.0{ScalarSuffix};
    {ScalarType} actual = target.Length();

    Assert.True(MathHelper.EqualScalar(expected, actual), "Vector4{ScalarSuffix}.Length did not return the expected value.");
}

// A test for LengthSquared ()
[Fact]
public void Vector4LengthSquaredTest()
{
    Vector3 a = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    {ScalarType} w = 4.0{ScalarSuffix};

    Vector4 target = new Vector4(a, w);

    {ScalarType} expected = 30;
    {ScalarType} actual;

    actual = target.LengthSquared();

    Assert.True(MathHelper.EqualScalar(expected, actual), "Vector4{ScalarSuffix}.LengthSquared did not return the expected value.");
}

// A test for Min (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MinTest()
{
    Vector4 a = new Vector4(-1.0{ScalarSuffix}, 4.0{ScalarSuffix}, -3.0{ScalarSuffix}, 1000.0{ScalarSuffix});
    Vector4 b = new Vector4(2.0{ScalarSuffix}, 1.0{ScalarSuffix}, -1.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 expected = new Vector4(-1.0{ScalarSuffix}, 1.0{ScalarSuffix}, -3.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 actual;
    actual = Vector4.Min(a, b);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Min did not return the expected value.");
}

// A test for Max (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MaxTest()
{
    Vector4 a = new Vector4(-1.0{ScalarSuffix}, 4.0{ScalarSuffix}, -3.0{ScalarSuffix}, 1000.0{ScalarSuffix});
    Vector4 b = new Vector4(2.0{ScalarSuffix}, 1.0{ScalarSuffix}, -1.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 expected = new Vector4(2.0{ScalarSuffix}, 4.0{ScalarSuffix}, -1.0{ScalarSuffix}, 1000.0{ScalarSuffix});
    Vector4 actual;
    actual = Vector4.Max(a, b);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Max did not return the expected value.");
}

[Fact]
public void Vector4MinMaxCodeCoverageTest()
{
    Vector4 min = Vector4.Zero;
    Vector4 max = Vector4.One;
    Vector4 actual;

    // Min.
    actual = Vector4.Min(min, max);
    Assert.Equal(actual, min);

    actual = Vector4.Min(max, min);
    Assert.Equal(actual, min);

    // Max.
    actual = Vector4.Max(min, max);
    Assert.Equal(actual, max);

    actual = Vector4.Max(max, min);
    Assert.Equal(actual, max);
}

// A test for Clamp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4ClampTest()
{
    Vector4 a = new Vector4(0.5{ScalarSuffix}, 0.3{ScalarSuffix}, 0.33{ScalarSuffix}, 0.44{ScalarSuffix});
    Vector4 min = new Vector4(0.0{ScalarSuffix}, 0.1{ScalarSuffix}, 0.13{ScalarSuffix}, 0.14{ScalarSuffix});
    Vector4 max = new Vector4(1.0{ScalarSuffix}, 1.1{ScalarSuffix}, 1.13{ScalarSuffix}, 1.14{ScalarSuffix});

    // Normal case.
    // Case N1: specified value is in the range.
    Vector4 expected = new Vector4(0.5{ScalarSuffix}, 0.3{ScalarSuffix}, 0.33{ScalarSuffix}, 0.44{ScalarSuffix});
    Vector4 actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // Normal case.
    // Case N2: specified value is bigger than max value.
    a = new Vector4(2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix}, 5.0{ScalarSuffix});
    expected = max;
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // Case N3: specified value is smaller than max value.
    a = new Vector4(-2.0{ScalarSuffix}, -3.0{ScalarSuffix}, -4.0{ScalarSuffix}, -5.0{ScalarSuffix});
    expected = min;
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // Case N4: combination case.
    a = new Vector4(-2.0{ScalarSuffix}, 0.5{ScalarSuffix}, 4.0{ScalarSuffix}, -5.0{ScalarSuffix});
    expected = new Vector4(min.X, a.Y, max.Z, min.W);
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // User specified min value is bigger than max value.
    max = new Vector4(0.0{ScalarSuffix}, 0.1{ScalarSuffix}, 0.13{ScalarSuffix}, 0.14{ScalarSuffix});
    min = new Vector4(1.0{ScalarSuffix}, 1.1{ScalarSuffix}, 1.13{ScalarSuffix}, 1.14{ScalarSuffix});

    // Case W1: specified value is in the range.
    a = new Vector4(0.5{ScalarSuffix}, 0.3{ScalarSuffix}, 0.33{ScalarSuffix}, 0.44{ScalarSuffix});
    expected = max;
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // Normal case.
    // Case W2: specified value is bigger than max and min value.
    a = new Vector4(2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix}, 5.0{ScalarSuffix});
    expected = max;
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");

    // Case W3: specified value is smaller than min and max value.
    a = new Vector4(-2.0{ScalarSuffix}, -3.0{ScalarSuffix}, -4.0{ScalarSuffix}, -5.0{ScalarSuffix});
    expected = max;
    actual = Vector4.Clamp(a, min, max);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Clamp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4LerpTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    {ScalarType} t = 0.5{ScalarSuffix};

    Vector4 expected = new Vector4(3.0{ScalarSuffix}, 4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
// Lerp test with factor zero
[Fact]
public void Vector4LerpTest1()
{
    Vector4 a = new Vector4(new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}), 4.0{ScalarSuffix});
    Vector4 b = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});

    {ScalarType} t = 0.0{ScalarSuffix};
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
// Lerp test with factor one
[Fact]
public void Vector4LerpTest2()
{
    Vector4 a = new Vector4(new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}), 4.0{ScalarSuffix});
    Vector4 b = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});

    {ScalarType} t = 1.0{ScalarSuffix};
    Vector4 expected = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});
    Vector4 actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
// Lerp test with factor > 1
[Fact]
public void Vector4LerpTest3()
{
    Vector4 a = new Vector4(new Vector3(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}), 0.0{ScalarSuffix});
    Vector4 b = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});

    {ScalarType} t = 2.0{ScalarSuffix};
    Vector4 expected = new Vector4(8.0{ScalarSuffix}, 10.0{ScalarSuffix}, 12.0{ScalarSuffix}, 14.0{ScalarSuffix});
    Vector4 actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
// Lerp test with factor < 0
[Fact]
public void Vector4LerpTest4()
{
    Vector4 a = new Vector4(new Vector3(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}), 0.0{ScalarSuffix});
    Vector4 b = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});

    {ScalarType} t = -2.0{ScalarSuffix};
    Vector4 expected = -(b * 2);
    Vector4 actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Lerp (Vector4{ScalarSuffix}, Vector4{ScalarSuffix}, {ScalarType})
// Lerp test from the same point
[Fact]
public void Vector4LerpTest5()
{
    Vector4 a = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});
    Vector4 b = new Vector4(4.0{ScalarSuffix}, 5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix});

    {ScalarType} t = 0.85{ScalarSuffix};
    Vector4 expected = a;
    Vector4 actual = Vector4.Lerp(a, b, t);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Lerp did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Matrix4x4)
[Fact]
public void Vector4TransformTest1()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    m.M41 = 10.0{ScalarSuffix};
    m.M42 = 20.0{ScalarSuffix};
    m.M43 = 30.0{ScalarSuffix};

    Vector4 expected = new Vector4(10.316987{ScalarSuffix}, 22.183012{ScalarSuffix}, 30.3660259{ScalarSuffix}, 1.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Matrix4x4)
[Fact]
public void Vector4TransformTest2()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    m.M41 = 10.0{ScalarSuffix};
    m.M42 = 20.0{ScalarSuffix};
    m.M43 = 30.0{ScalarSuffix};

    Vector4 expected = new Vector4(12.19198728{ScalarSuffix}, 21.53349376{ScalarSuffix}, 32.61602545{ScalarSuffix}, 1.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "vector4.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Matrix4x4)
[Fact]
public void Vector4TransformVector4Test()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    m.M41 = 10.0{ScalarSuffix};
    m.M42 = 20.0{ScalarSuffix};
    m.M43 = 30.0{ScalarSuffix};

    Vector4 expected = new Vector4(2.19198728{ScalarSuffix}, 1.53349376{ScalarSuffix}, 2.61602545{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");

    //
    v.W = 1.0{ScalarSuffix};

    expected = new Vector4(12.19198728{ScalarSuffix}, 21.53349376{ScalarSuffix}, 32.61602545{ScalarSuffix}, 1.0{ScalarSuffix});
    actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Matrix4x4)
// Transform vector4 with zero matrix
[Fact]
public void Vector4TransformVector4Test1()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Matrix4x4 m = new Matrix4x4();
    Vector4 expected = new Vector4(0, 0, 0, 0);

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Matrix4x4)
// Transform vector4 with identity matrix
[Fact]
public void Vector4TransformVector4Test2()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Matrix4x4 m = Matrix4x4.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Matrix4x4)
// Transform Vector3{ScalarSuffix} test
[Fact]
public void Vector4TransformVector3Test()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    m.M41 = 10.0{ScalarSuffix};
    m.M42 = 20.0{ScalarSuffix};
    m.M43 = 30.0{ScalarSuffix};

    Vector4 expected = Vector4.Transform(new Vector4(v, 1.0{ScalarSuffix}), m);
    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Matrix4x4)
// Transform vector3 with zero matrix
[Fact]
public void Vector4TransformVector3Test1()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    Matrix4x4 m = new Matrix4x4();
    Vector4 expected = new Vector4(0, 0, 0, 0);

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Matrix4x4)
// Transform vector3 with identity matrix
[Fact]
public void Vector4TransformVector3Test2()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    Matrix4x4 m = Matrix4x4.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Matrix4x4)
// Transform Vector2{ScalarSuffix} test
[Fact]
public void Vector4TransformVector2Test()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    m.M41 = 10.0{ScalarSuffix};
    m.M42 = 20.0{ScalarSuffix};
    m.M43 = 30.0{ScalarSuffix};

    Vector4 expected = Vector4.Transform(new Vector4(v, 0.0{ScalarSuffix}, 1.0{ScalarSuffix}), m);
    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Matrix4x4)
// Transform Vector2{ScalarSuffix} with zero matrix
[Fact]
public void Vector4TransformVector2Test1()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});
    Matrix4x4 m = new Matrix4x4();
    Vector4 expected = new Vector4(0, 0, 0, 0);

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Matrix4x4)
// Transform vector2 with identity matrix
[Fact]
public void Vector4TransformVector2Test2()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});
    Matrix4x4 m = Matrix4x4.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 0, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, m);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Quaternion)
[Fact]
public void Vector4TransformVector2QuatanionTest()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));

    Quaternion q = Quaternion.CreateFromRotationMatrix(m);

    Vector4 expected = Vector4.Transform(v, m);
    Vector4 actual;

    actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Quaternion)
[Fact]
public void Vector4TransformVector3Quaternion()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    Quaternion q = Quaternion.CreateFromRotationMatrix(m);

    Vector4 expected = Vector4.Transform(v, m);
    Vector4 actual;

    actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "vector4.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Quaternion)
[Fact]
public void Vector4TransformVector4QuaternionTest()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    Quaternion q = Quaternion.CreateFromRotationMatrix(m);

    Vector4 expected = Vector4.Transform(v, m);
    Vector4 actual;

    actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");

    //
    v.W = 1.0{ScalarSuffix};
    expected.W = 1.0{ScalarSuffix};
    actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Quaternion)
// Transform vector4 with zero quaternion
[Fact]
public void Vector4TransformVector4QuaternionTest1()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Quaternion q = new Quaternion();
    Vector4 expected = v;

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector4{ScalarSuffix}, Quaternion)
// Transform vector4 with identity matrix
[Fact]
public void Vector4TransformVector4QuaternionTest2()
{
    Vector4 v = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Quaternion q = Quaternion.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Quaternion)
// Transform Vector3{ScalarSuffix} test
[Fact]
public void Vector4TransformVector3QuaternionTest()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    Quaternion q = Quaternion.CreateFromRotationMatrix(m);

    Vector4 expected = Vector4.Transform(v, m);
    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Quaternion)
// Transform vector3 with zero quaternion
[Fact]
public void Vector4TransformVector3QuaternionTest1()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    Quaternion q = new Quaternion();
    Vector4 expected = new Vector4(v, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector3{ScalarSuffix}, Quaternion)
// Transform vector3 with identity quaternion
[Fact]
public void Vector4TransformVector3QuaternionTest2()
{
    Vector3 v = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    Quaternion q = Quaternion.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Quaternion)
// Transform Vector2{ScalarSuffix} by quaternion test
[Fact]
public void Vector4TransformVector2QuaternionTest()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});

    Matrix4x4 m =
        Matrix4x4.CreateRotationX(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationY(MathHelper.ToRadians(30.0{ScalarSuffix})) *
        Matrix4x4.CreateRotationZ(MathHelper.ToRadians(30.0{ScalarSuffix}));
    Quaternion q = Quaternion.CreateFromRotationMatrix(m);

    Vector4 expected = Vector4.Transform(v, m);
    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Quaternion)
// Transform Vector2{ScalarSuffix} with zero quaternion
[Fact]
public void Vector4TransformVector2QuaternionTest1()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});
    Quaternion q = new Quaternion();
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 0, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Transform (Vector2{ScalarSuffix}, Matrix4x4)
// Transform vector2 with identity Quaternion
[Fact]
public void Vector4TransformVector2QuaternionTest2()
{
    Vector2 v = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});
    Quaternion q = Quaternion.Identity;
    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 0, 1.0{ScalarSuffix});

    Vector4 actual = Vector4.Transform(v, q);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Transform did not return the expected value.");
}

// A test for Normalize (Vector4{ScalarSuffix})
[Fact]
public void Vector4NormalizeTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    Vector4 expected = new Vector4(
        0.1825741858350553711523232609336{ScalarSuffix},
        0.3651483716701107423046465218672{ScalarSuffix},
        0.5477225575051661134569697828008{ScalarSuffix},
        0.7302967433402214846092930437344{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Normalize(a);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Normalize did not return the expected value.");
}

// A test for Normalize (Vector4{ScalarSuffix})
// Normalize vector of length one
[Fact]
public void Vector4NormalizeTest1()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 expected = new Vector4(1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 actual = Vector4.Normalize(a);
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.Normalize did not return the expected value.");
}

// A test for Normalize (Vector4{ScalarSuffix})
// Normalize vector of length zero
[Fact]
public void Vector4NormalizeTest2()
{
    Vector4 a = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});

    Vector4 expected = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Vector4 actual = Vector4.Normalize(a);
    Assert.True({ScalarType}.IsNaN(actual.X) && {ScalarType}.IsNaN(actual.Y) && {ScalarType}.IsNaN(actual.Z) && {ScalarType}.IsNaN(actual.W), "Vector4{ScalarSuffix}.Normalize did not return the expected value.");
}

// A test for operator - (Vector4{ScalarSuffix})
[Fact]
public void Vector4UnaryNegationTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    Vector4 expected = new Vector4(-1.0{ScalarSuffix}, -2.0{ScalarSuffix}, -3.0{ScalarSuffix}, -4.0{ScalarSuffix});
    Vector4 actual;

    actual = -a;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator - did not return the expected value.");
}

// A test for operator - (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4SubtractionTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 6.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 9.0{ScalarSuffix});

    Vector4 expected = new Vector4(-4.0{ScalarSuffix}, 4.0{ScalarSuffix}, 0.0{ScalarSuffix}, -5.0{ScalarSuffix});
    Vector4 actual;

    actual = a - b;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator - did not return the expected value.");
}

// A test for operator * (Vector4{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4MultiplyOperatorTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    const {ScalarType} factor = 2.0{ScalarSuffix};

    Vector4 expected = new Vector4(2.0{ScalarSuffix}, 4.0{ScalarSuffix}, 6.0{ScalarSuffix}, 8.0{ScalarSuffix});
    Vector4 actual;

    actual = a * factor;
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator * did not return the expected value.");
}

// A test for operator * ({ScalarType}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MultiplyOperatorTest2()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    const {ScalarType} factor = 2.0{ScalarSuffix};
    Vector4 expected = new Vector4(2.0{ScalarSuffix}, 4.0{ScalarSuffix}, 6.0{ScalarSuffix}, 8.0{ScalarSuffix});
    Vector4 actual;

    actual = factor * a;
    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator * did not return the expected value.");
}

// A test for operator * (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MultiplyOperatorTest3()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(5.0{ScalarSuffix}, 12.0{ScalarSuffix}, 21.0{ScalarSuffix}, 32.0{ScalarSuffix});
    Vector4 actual;

    actual = a * b;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator * did not return the expected value.");
}

// A test for operator / (Vector4{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4DivisionTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    {ScalarType} div = 2.0{ScalarSuffix};

    Vector4 expected = new Vector4(0.5{ScalarSuffix}, 1.0{ScalarSuffix}, 1.5{ScalarSuffix}, 2.0{ScalarSuffix});
    Vector4 actual;

    actual = a / div;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
}

// A test for operator / (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4DivisionTest1()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(1.0{ScalarSuffix} / 5.0{ScalarSuffix}, 6.0{ScalarSuffix} / 2.0{ScalarSuffix}, 7.0{ScalarSuffix} / 3.0{ScalarSuffix}, 4.0{ScalarSuffix} / 8.0{ScalarSuffix});
    Vector4 actual;

    actual = a / b;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
}

// A test for operator / (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
// Divide by zero
[Fact]
public void Vector4DivisionTest2()
{
    Vector4 a = new Vector4(-2.0{ScalarSuffix}, 3.0{ScalarSuffix}, {ScalarType}.MaxValue, {ScalarType}.NaN);

    {ScalarType} div = 0.0{ScalarSuffix};

    Vector4 actual = a / div;

    Assert.True({ScalarType}.IsNegativeInfinity(actual.X), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsPositiveInfinity(actual.Y), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsPositiveInfinity(actual.Z), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsNaN(actual.W), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
}

// A test for operator / (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
// Divide by zero
[Fact]
public void Vector4DivisionTest3()
{
    Vector4 a = new Vector4(0.047{ScalarSuffix}, -3.0{ScalarSuffix}, {ScalarType}.NegativeInfinity, {ScalarType}.MinValue);
    Vector4 b = new Vector4();

    Vector4 actual = a / b;

    Assert.True({ScalarType}.IsPositiveInfinity(actual.X), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsNegativeInfinity(actual.Y), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsNegativeInfinity(actual.Z), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
    Assert.True({ScalarType}.IsNegativeInfinity(actual.W), "Vector4{ScalarSuffix}.operator / did not return the expected value.");
}

// A test for operator + (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4AdditionTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(6.0{ScalarSuffix}, 8.0{ScalarSuffix}, 10.0{ScalarSuffix}, 12.0{ScalarSuffix});
    Vector4 actual;

    actual = a + b;

    Assert.True(MathHelper.Equal(expected, actual), "Vector4{ScalarSuffix}.operator + did not return the expected value.");
}

[Fact]
public void OperatorAddTest()
{
    Vector4 v1 = new Vector4(2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v2 = new Vector4(5.5{ScalarSuffix}, 4.5{ScalarSuffix}, 6.5{ScalarSuffix}, 7.5{ScalarSuffix});

    Vector4 v3 = v1 + v2;
    Vector4 v5 = new Vector4(-1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, {ScalarType}.NaN);
    Vector4 v4 = v1 + v5;
    Assert.Equal(8.0{ScalarSuffix}, v3.X);
    Assert.Equal(6.5{ScalarSuffix}, v3.Y);
    Assert.Equal(9.5{ScalarSuffix}, v3.Z);
    Assert.Equal(10.8{ScalarSuffix}, v3.W);
    Assert.Equal(1.5{ScalarSuffix}, v4.X);
    Assert.Equal(2.0{ScalarSuffix}, v4.Y);
    Assert.Equal(3.0{ScalarSuffix}, v4.Z);
    Assert.Equal({ScalarType}.NaN, v4.W);
}

// A test for Vector4{ScalarSuffix} ({ScalarType}, {ScalarType}, {ScalarType}, {ScalarType})
[Fact]
public void Vector4ConstructorTest()
{
    {ScalarType} x = 1.0{ScalarSuffix};
    {ScalarType} y = 2.0{ScalarSuffix};
    {ScalarType} z = 3.0{ScalarSuffix};
    {ScalarType} w = 4.0{ScalarSuffix};

    Vector4 target = new Vector4(x, y, z, w);

    Assert.True(MathHelper.Equal(target.X, x) && MathHelper.Equal(target.Y, y) && MathHelper.Equal(target.Z, z) && MathHelper.Equal(target.W, w),
        "Vector4{ScalarSuffix} constructor(x,y,z,w) did not return the expected value.");
}

// A test for Vector4{ScalarSuffix} (Vector2{ScalarSuffix}, {ScalarType}, {ScalarType})
[Fact]
public void Vector4ConstructorTest1()
{
    Vector2 a = new Vector2(1.0{ScalarSuffix}, 2.0{ScalarSuffix});
    {ScalarType} z = 3.0{ScalarSuffix};
    {ScalarType} w = 4.0{ScalarSuffix};

    Vector4 target = new Vector4(a, z, w);
    Assert.True(MathHelper.Equal(target.X, a.X) && MathHelper.Equal(target.Y, a.Y) && MathHelper.Equal(target.Z, z) && MathHelper.Equal(target.W, w),
        "Vector4{ScalarSuffix} constructor(Vector2{ScalarSuffix},z,w) did not return the expected value.");
}

// A test for Vector4{ScalarSuffix} (Vector3{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4ConstructorTest2()
{
    Vector3 a = new Vector3(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix});
    {ScalarType} w = 4.0{ScalarSuffix};

    Vector4 target = new Vector4(a, w);

    Assert.True(MathHelper.Equal(target.X, a.X) && MathHelper.Equal(target.Y, a.Y) && MathHelper.Equal(target.Z, a.Z) && MathHelper.Equal(target.W, w),
        "Vector4{ScalarSuffix} constructor(Vector3{ScalarSuffix},w) did not return the expected value.");
}

// A test for Vector4{ScalarSuffix} ()
// Constructor with no parameter
[Fact]
public void Vector4ConstructorTest4()
{
    Vector4 a = new Vector4();

    Assert.Equal(0.0{ScalarSuffix}, a.X);
    Assert.Equal(0.0{ScalarSuffix}, a.Y);
    Assert.Equal(0.0{ScalarSuffix}, a.Z);
    Assert.Equal(0.0{ScalarSuffix}, a.W);
}

// A test for Vector4{ScalarSuffix} ()
// Constructor with special {ScalarType}ing values
[Fact]
public void Vector4ConstructorTest5()
{
    Vector4 target = new Vector4({ScalarType}.NaN, {ScalarType}.MaxValue, {ScalarType}.PositiveInfinity, {ScalarType}.Epsilon);

    Assert.True({ScalarType}.IsNaN(target.X), "Vector4{ScalarSuffix}.constructor ({ScalarType}, {ScalarType}, {ScalarType}, {ScalarType}) did not return the expected value.");
    Assert.True({ScalarType}.Equals({ScalarType}.MaxValue, target.Y), "Vector4{ScalarSuffix}.constructor ({ScalarType}, {ScalarType}, {ScalarType}, {ScalarType}) did not return the expected value.");
    Assert.True({ScalarType}.IsPositiveInfinity(target.Z), "Vector4{ScalarSuffix}.constructor ({ScalarType}, {ScalarType}, {ScalarType}, {ScalarType}) did not return the expected value.");
    Assert.True({ScalarType}.Equals({ScalarType}.Epsilon, target.W), "Vector4{ScalarSuffix}.constructor ({ScalarType}, {ScalarType}, {ScalarType}, {ScalarType}) did not return the expected value.");
}

// A test for Add (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4AddTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(6.0{ScalarSuffix}, 8.0{ScalarSuffix}, 10.0{ScalarSuffix}, 12.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Add(a, b);
    Assert.Equal(expected, actual);
}

// A test for Divide (Vector4{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4DivideTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    {ScalarType} div = 2.0{ScalarSuffix};
    Vector4 expected = new Vector4(0.5{ScalarSuffix}, 1.0{ScalarSuffix}, 1.5{ScalarSuffix}, 2.0{ScalarSuffix});
    Vector4 actual;
    actual = Vector4.Divide(a, div);
    Assert.Equal(expected, actual);
}

// A test for Divide (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4DivideTest1()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(1.0{ScalarSuffix} / 5.0{ScalarSuffix}, 6.0{ScalarSuffix} / 2.0{ScalarSuffix}, 7.0{ScalarSuffix} / 3.0{ScalarSuffix}, 4.0{ScalarSuffix} / 8.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Divide(a, b);
    Assert.Equal(expected, actual);
}

// A test for Equals (object)
[Fact]
public void Vector4EqualsTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    // case 1: compare between same values
    object obj = b;

    bool expected = true;
    bool actual = a.Equals(obj);
    Assert.Equal(expected, actual);

    // case 2: compare between different values
    b.X = 10.0{ScalarSuffix};
    obj = b;
    expected = false;
    actual = a.Equals(obj);
    Assert.Equal(expected, actual);

    // case 3: compare between different types.
    obj = new Quaternion();
    expected = false;
    actual = a.Equals(obj);
    Assert.Equal(expected, actual);

    // case 3: compare against null.
    obj = null;
    expected = false;
    actual = a.Equals(obj);
    Assert.Equal(expected, actual);
}

// A test for Multiply ({ScalarType}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MultiplyTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    const {ScalarType} factor = 2.0{ScalarSuffix};
    Vector4 expected = new Vector4(2.0{ScalarSuffix}, 4.0{ScalarSuffix}, 6.0{ScalarSuffix}, 8.0{ScalarSuffix});
    Vector4 actual = Vector4.Multiply(factor, a);
    Assert.Equal(expected, actual);
}

// A test for Multiply (Vector4{ScalarSuffix}, {ScalarType})
[Fact]
public void Vector4MultiplyTest2()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    const {ScalarType} factor = 2.0{ScalarSuffix};
    Vector4 expected = new Vector4(2.0{ScalarSuffix}, 4.0{ScalarSuffix}, 6.0{ScalarSuffix}, 8.0{ScalarSuffix});
    Vector4 actual = Vector4.Multiply(a, factor);
    Assert.Equal(expected, actual);
}

// A test for Multiply (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4MultiplyTest3()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 6.0{ScalarSuffix}, 7.0{ScalarSuffix}, 8.0{ScalarSuffix});

    Vector4 expected = new Vector4(5.0{ScalarSuffix}, 12.0{ScalarSuffix}, 21.0{ScalarSuffix}, 32.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Multiply(a, b);
    Assert.Equal(expected, actual);
}

// A test for Negate (Vector4{ScalarSuffix})
[Fact]
public void Vector4NegateTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    Vector4 expected = new Vector4(-1.0{ScalarSuffix}, -2.0{ScalarSuffix}, -3.0{ScalarSuffix}, -4.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Negate(a);
    Assert.Equal(expected, actual);
}

// A test for operator != (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4InequalityTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    // case 1: compare between same values
    bool expected = false;
    bool actual = a != b;
    Assert.Equal(expected, actual);

    // case 2: compare between different values
    b.X = 10.0{ScalarSuffix};
    expected = true;
    actual = a != b;
    Assert.Equal(expected, actual);
}

// A test for operator == (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4EqualityTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    // case 1: compare between same values
    bool expected = true;
    bool actual = a == b;
    Assert.Equal(expected, actual);

    // case 2: compare between different values
    b.X = 10.0{ScalarSuffix};
    expected = false;
    actual = a == b;
    Assert.Equal(expected, actual);
}

// A test for Subtract (Vector4{ScalarSuffix}, Vector4{ScalarSuffix})
[Fact]
public void Vector4SubtractTest()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 6.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(5.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 9.0{ScalarSuffix});

    Vector4 expected = new Vector4(-4.0{ScalarSuffix}, 4.0{ScalarSuffix}, 0.0{ScalarSuffix}, -5.0{ScalarSuffix});
    Vector4 actual;

    actual = Vector4.Subtract(a, b);

    Assert.Equal(expected, actual);
}

// A test for UnitW
[Fact]
public void Vector4UnitWTest()
{
    Vector4 val = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 1.0{ScalarSuffix});
    Assert.Equal(val, Vector4.UnitW);
}

// A test for UnitX
[Fact]
public void Vector4UnitXTest()
{
    Vector4 val = new Vector4(1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Assert.Equal(val, Vector4.UnitX);
}

// A test for UnitY
[Fact]
public void Vector4UnitYTest()
{
    Vector4 val = new Vector4(0.0{ScalarSuffix}, 1.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Assert.Equal(val, Vector4.UnitY);
}

// A test for UnitZ
[Fact]
public void Vector4UnitZTest()
{
    Vector4 val = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 1.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Assert.Equal(val, Vector4.UnitZ);
}

// A test for One
[Fact]
public void Vector4OneTest()
{
    Vector4 val = new Vector4(1.0{ScalarSuffix}, 1.0{ScalarSuffix}, 1.0{ScalarSuffix}, 1.0{ScalarSuffix});
    Assert.Equal(val, Vector4.One);
}

// A test for Zero
[Fact]
public void Vector4ZeroTest()
{
    Vector4 val = new Vector4(0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix}, 0.0{ScalarSuffix});
    Assert.Equal(val, Vector4.Zero);
}

// A test for Equals (Vector4{ScalarSuffix})
[Fact]
public void Vector4EqualsTest1()
{
    Vector4 a = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});
    Vector4 b = new Vector4(1.0{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 4.0{ScalarSuffix});

    // case 1: compare between same values
    Assert.True(a.Equals(b));

    // case 2: compare between different values
    b.X = 10.0{ScalarSuffix};
    Assert.False(a.Equals(b));
}

// A test for Vector4{ScalarSuffix} ({ScalarType})
[Fact]
public void Vector4ConstructorTest6()
{
    {ScalarType} value = 1.0{ScalarSuffix};
    Vector4 target = new Vector4(value);

    Vector4 expected = new Vector4(value, value, value, value);
    Assert.Equal(expected, target);

    value = 2.0{ScalarSuffix};
    target = new Vector4(value);
    expected = new Vector4(value, value, value, value);
    Assert.Equal(expected, target);
}

// A test for Vector4{ScalarSuffix} comparison involving NaN values
[Fact]
public void Vector4EqualsNanTest()
{
    Vector4 a = new Vector4({ScalarType}.NaN, 0, 0, 0);
    Vector4 b = new Vector4(0, {ScalarType}.NaN, 0, 0);
    Vector4 c = new Vector4(0, 0, {ScalarType}.NaN, 0);
    Vector4 d = new Vector4(0, 0, 0, {ScalarType}.NaN);

    Assert.False(a == Vector4.Zero);
    Assert.False(b == Vector4.Zero);
    Assert.False(c == Vector4.Zero);
    Assert.False(d == Vector4.Zero);

    Assert.True(a != Vector4.Zero);
    Assert.True(b != Vector4.Zero);
    Assert.True(c != Vector4.Zero);
    Assert.True(d != Vector4.Zero);

    Assert.False(a.Equals(Vector4.Zero));
    Assert.False(b.Equals(Vector4.Zero));
    Assert.False(c.Equals(Vector4.Zero));
    Assert.False(d.Equals(Vector4.Zero));

    // Counterintuitive result - IEEE rules for NaN comparison are weird!
    Assert.False(a.Equals(a));
    Assert.False(b.Equals(b));
    Assert.False(c.Equals(c));
    Assert.False(d.Equals(d));
}

[Fact]
public void Vector4AbsTest()
{
    Vector4 v1 = new Vector4(-2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v3 = Vector4.Abs(new Vector4({ScalarType}.PositiveInfinity, 0.0{ScalarSuffix}, {ScalarType}.NegativeInfinity, {ScalarType}.NaN));
    Vector4 v = Vector4.Abs(v1);
    Assert.Equal(2.5{ScalarSuffix}, v.X);
    Assert.Equal(2.0{ScalarSuffix}, v.Y);
    Assert.Equal(3.0{ScalarSuffix}, v.Z);
    Assert.Equal(3.3{ScalarSuffix}, v.W);
    Assert.Equal({ScalarType}.PositiveInfinity, v3.X);
    Assert.Equal(0.0{ScalarSuffix}, v3.Y);
    Assert.Equal({ScalarType}.PositiveInfinity, v3.Z);
    Assert.Equal({ScalarType}.NaN, v3.W);
}

[Fact]
public void Vector4SqrtTest()
{
    Vector4 v1 = new Vector4(-2.5{ScalarSuffix}, 2.0{ScalarSuffix}, 3.0{ScalarSuffix}, 3.3{ScalarSuffix});
    Vector4 v2 = new Vector4(5.5{ScalarSuffix}, 4.5{ScalarSuffix}, 6.5{ScalarSuffix}, 7.5{ScalarSuffix});
    Assert.Equal(2, (int)Vector4.SquareRoot(v2).X);
    Assert.Equal(2, (int)Vector4.SquareRoot(v2).Y);
    Assert.Equal(2, (int)Vector4.SquareRoot(v2).Z);
    Assert.Equal(2, (int)Vector4.SquareRoot(v2).W);
    Assert.Equal({ScalarType}.NaN, Vector4.SquareRoot(v1).X);
}

// A test to make sure these types are blittable directly into GPU buffer memory layouts
[Fact]
public unsafe void Vector4SizeofTest()
{
    Assert.Equal(16, sizeof(Vector4));
    Assert.Equal(32, sizeof(Vector4_2x));
    Assert.Equal(20, sizeof(Vector4Plus{ScalarType}));
    Assert.Equal(40, sizeof(Vector4Plus{ScalarType}_2x));
}

[StructLayout(LayoutKind.Sequential)]
struct Vector4_2x
{
    private Vector4 _a;
    private Vector4 _b;
}

[StructLayout(LayoutKind.Sequential)]
struct Vector4Plus{ScalarType}
{
    private Vector4 _v;
    private {ScalarType} _f;
}

[StructLayout(LayoutKind.Sequential)]
struct Vector4Plus{ScalarType}_2x
{
    private Vector4Plus{ScalarType} _a;
    private Vector4Plus{ScalarType} _b;
}
{GenericSpecific}