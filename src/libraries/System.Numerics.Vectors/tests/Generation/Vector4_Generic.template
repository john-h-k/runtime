// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
{EndLicense}

[Fact]
public void SetFieldsTest()
{
    {TestType} v3 = new {TestType}(4f, 5f, 6f, 7f);
    v3 = v3.WithX(1.0{ScalarSuffix});
    v3 = v3.WithY(2.0{ScalarSuffix});
    v3 = v3.WithZ(3.0{ScalarSuffix});
    v3 = v3.WithW(4.0{ScalarSuffix});
    Assert.Equal(1.0f, v3.X);
    Assert.Equal(2.0f, v3.Y);
    Assert.Equal(3.0f, v3.Z);
    Assert.Equal(4.0f, v3.W);
    {TestType} v4 = v3;
    v4 = v4.WithY(0.5{ScalarSuffix});
    v4 = v4.WithZ(2.2{ScalarSuffix});
    v4 = v4.WithW(3.5{ScalarSuffix});
    Assert.Equal(1.0f, v4.X);
    Assert.Equal(0.5f, v4.Y);
    Assert.Equal(2.2f, v4.Z);
    Assert.Equal(3.5f, v4.W);
    Assert.Equal(2.0f, v3.Y);
}

[Fact]
public void EmbeddedVectorSetFields()
{
    EmbeddedVectorObject evo = new EmbeddedVectorObject();
    evo.FieldVector = evo.FieldVector.WithX(5.0{ScalarSuffix});
    evo.FieldVector = evo.FieldVector.WithY(5.0{ScalarSuffix});
    evo.FieldVector = evo.FieldVector.WithZ(5.0{ScalarSuffix});
    evo.FieldVector = evo.FieldVector.WithW(5.0{ScalarSuffix});
    Assert.Equal(5.0f, evo.FieldVector.X);
    Assert.Equal(5.0f, evo.FieldVector.Y);
    Assert.Equal(5.0f, evo.FieldVector.Z);
    Assert.Equal(5.0f, evo.FieldVector.W);
}

[Fact]
public void DeeplyEmbeddedObjectTest()
{
    DeeplyEmbeddedClass obj = new DeeplyEmbeddedClass();
    obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector = obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector.WithX(5{ScalarSuffix});
    Assert.Equal(5f, obj.RootEmbeddedObject.X);
    Assert.Equal(5f, obj.RootEmbeddedObject.Y);
    Assert.Equal(1f, obj.RootEmbeddedObject.Z);
    Assert.Equal(-5f, obj.RootEmbeddedObject.W);
    obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector = new {TestType}(1, 2, 3, 4);
    Assert.Equal(1f, obj.RootEmbeddedObject.X);
    Assert.Equal(2f, obj.RootEmbeddedObject.Y);
    Assert.Equal(3f, obj.RootEmbeddedObject.Z);
    Assert.Equal(4f, obj.RootEmbeddedObject.W);
}

[Fact]
public void DeeplyEmbeddedStructTest()
{
    DeeplyEmbeddedStruct obj = DeeplyEmbeddedStruct.Create();
    obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector = obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector.WithX(5{ScalarSuffix});
    Assert.Equal(5f, obj.RootEmbeddedObject.X);
    Assert.Equal(5f, obj.RootEmbeddedObject.Y);
    Assert.Equal(1f, obj.RootEmbeddedObject.Z);
    Assert.Equal(-5f, obj.RootEmbeddedObject.W);
    obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector = new {TestType}(1, 2, 3, 4);
    Assert.Equal(1f, obj.RootEmbeddedObject.X);
    Assert.Equal(2f, obj.RootEmbeddedObject.Y);
    Assert.Equal(3f, obj.RootEmbeddedObject.Z);
    Assert.Equal(4f, obj.RootEmbeddedObject.W);
}

private class EmbeddedVectorObject
{
    public {TestType} FieldVector;
}

private class DeeplyEmbeddedClass
{
    public readonly Level0 L0 = new Level0();
    public {TestType} RootEmbeddedObject { get { return L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector; } }
    public class Level0
    {
        public readonly Level1 L1 = new Level1();
        public class Level1
        {
            public readonly Level2 L2 = new Level2();
            public class Level2
            {
                public readonly Level3 L3 = new Level3();
                public class Level3
                {
                    public readonly Level4 L4 = new Level4();
                    public class Level4
                    {
                        public readonly Level5 L5 = new Level5();
                        public class Level5
                        {
                            public readonly Level6 L6 = new Level6();
                            public class Level6
                            {
                                public readonly Level7 L7 = new Level7();
                                public class Level7
                                {
                                    public {TestType} EmbeddedVector = new {TestType}(1, 5, 1, -5);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Contrived test for strangely-sized and shaped embedded structures, with unused buffer fields.
#pragma warning disable 0169
private struct DeeplyEmbeddedStruct
{
    public static DeeplyEmbeddedStruct Create()
    {
        var obj = new DeeplyEmbeddedStruct();
        obj.L0 = new Level0();
        obj.L0.L1 = new Level0.Level1();
        obj.L0.L1.L2 = new Level0.Level1.Level2();
        obj.L0.L1.L2.L3 = new Level0.Level1.Level2.Level3();
        obj.L0.L1.L2.L3.L4 = new Level0.Level1.Level2.Level3.Level4();
        obj.L0.L1.L2.L3.L4.L5 = new Level0.Level1.Level2.Level3.Level4.Level5();
        obj.L0.L1.L2.L3.L4.L5.L6 = new Level0.Level1.Level2.Level3.Level4.Level5.Level6();
        obj.L0.L1.L2.L3.L4.L5.L6.L7 = new Level0.Level1.Level2.Level3.Level4.Level5.Level6.Level7();
        obj.L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector = new {TestType}(1, 5, 1, -5);

        return obj;
    }

    public Level0 L0;
    public {TestType} RootEmbeddedObject { get { return L0.L1.L2.L3.L4.L5.L6.L7.EmbeddedVector; } }
    public struct Level0
    {
        private float _buffer0, _buffer1;
        public Level1 L1;
        private float _buffer2;
        public struct Level1
        {
            private float _buffer0, _buffer1;
            public Level2 L2;
            private byte _buffer2;
            public struct Level2
            {
                public Level3 L3;
                private float _buffer0;
                private byte _buffer1;
                public struct Level3
                {
                    public Level4 L4;
                    public struct Level4
                    {
                        private float _buffer0;
                        public Level5 L5;
                        private long _buffer1;
                        private byte _buffer2;
                        private double _buffer3;
                        public struct Level5
                        {
                            private byte _buffer0;
                            public Level6 L6;
                            public struct Level6
                            {
                                private byte _buffer0;
                                public Level7 L7;
                                private byte _buffer1, _buffer2;
                                public struct Level7
                                {
                                    public {TestType} EmbeddedVector;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
#pragma warning restore 0169
